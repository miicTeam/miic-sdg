clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]] = clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]] %>%
dplyr::select(-PATIENT_ID, -sample_id )
common_vars = c("SAMPLE_ID", "Treatment.Arm", "Disease.Duration", "Sex", "Age", "BMI", "Ethnicity",
"Race", "Tobacco.Use", "MCS.Clin.Rem.Week10",
'dHemoglobin_Week10', 'dLymphocytes_Week10', 'dMonocytes_Week10', 'dNeutrophils_Week10',
'dAlbumin_Week10')
db_baseline = cbind(dplyr::left_join(clinical_Hibiscus_list[['baseline']][,which(colnames(clinical_Hibiscus_list[['baseline']]) %in% common_vars)] ,
dm_vcall_freq[['baseline']][[as.character(specificity)]], by=c('SAMPLE_ID' = 'sample_id')), time = 'baseline')
db_baseline = cbind(db_baseline, clinical_Hibiscus_list[['baseline']][, grep('_Baseline', colnames(clinical_Hibiscus_list[['baseline']]))])
colnames(db_baseline) = gsub('_Baseline','', colnames(db_baseline))
db_week10 = cbind(dplyr::left_join(clinical_Hibiscus_list[['week10']][,which(colnames(clinical_Hibiscus_list[['week10']]) %in% common_vars)],
dm_vcall_freq[['week10']][[as.character(specificity)]], by=c('SAMPLE_ID' = 'sample_id')), time = 'week10')
db_week10 = cbind(db_week10, clinical_Hibiscus_list[['week10']][, grep('_Week10', colnames(clinical_Hibiscus_list[['week10']]))])
colnames(db_week10) = gsub('_Week10','', colnames(db_week10))
clinical_Hibiscus_kept_merged_vcall[[as.character(specificity)]] =  rbind(db_baseline, db_week10)
}
miic_res_list = list()
summary  = list()
for(specificity in specificities){
# clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]] = clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]] %>%     dplyr::select(-Repertoire_length)
for(c in 1:ncol(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]])){
if(all(unique(na.omit(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]][,c])) %in% c(0, 1)))
clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]][,c] = factor(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]][,c],
levels = unique(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]][,c]))
}
dataType = c()
for(c in 1:ncol(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]])){
if(isNumberVector(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]][,c]) & class(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]][,c]) != 'factor'){
dataType = c(dataType, 1)
} else {
dataType = c(dataType, 0)
}
}
stateOrder = data.frame(var_names = colnames(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]]), var_type = dataType)
miic_res_list[[as.character(specificity)]] = miic(as.data.frame(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]]), state_order = stateOrder)
summary[[as.character(specificity)]] = miic_res_list$edges
}
# stratify on treatment
for(treatment in unique(clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]]$Treatment.Arm)){
for(specificity in c(3,4)){
d = clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]] %>% dplyr::filter(Treatment.Arm==treatment)
# clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]] = clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(specificity)]] %>%     dplyr::select(-Repertoire_length)
for(c in 1:ncol(d)){
if(all(unique(na.omit(d[,c])) %in% c(0, 1)))
d[,c] = factor(d[,c],  levels = unique(d[,c]))
}
dataType = c()
for(c in 1:ncol(d)){
if(isNumberVector(d[,c]) & class(d[,c]) != 'factor' & length(unique(d[,c])) > 2){
dataType = c(dataType, 1)
} else {
dataType = c(dataType, 0)
}
}
stateOrder = data.frame(var_names = colnames(d), var_type = dataType)
miic_res_list[[paste(as.character(specificity), treatment)]] = miic(as.data.frame(d), state_order = stateOrder)
summary[[paste(as.character(specificity), treatment)]] = miic_res_list$edges
}
}
# prop.table(table(clinical_Hibiscus_kept_merged_vcall_MIIC$TRBV6, clinical_Hibiscus_kept_merged_vcall_MIIC$MCS.Clin.Resp.Week10), margin = 2)
# ggplot(clinical_Hibiscus_kept_merged_vcall_MIIC, aes(x=TRBV6)) + geom_histogram() + facet_grid(clinical_Hibiscus_kept_merged_vcall_MIIC$MCS.Clin.Resp.Week10)
library(igraph)
library(networkD3)
graphs = list()
for(specificity in names(miic_res_list)){
summary = miic_res_list[[as.character(specificity)]]$edges
summary_kept = summary %>% dplyr::filter(category=='1')
links <- data_frame(
from=summary_kept$x,
to=summary_kept$y
)
for(node in colnames(miic_res_list[[as.character(specificity)]]$adj_matrix)){
if(!node %in% links$from & !node %in% links$to){
links = rbind(links, data.frame(from=node,to=node))
}
}
links = as.data.frame(links)
links
# Plot
graphs[[specificity]] <- simpleNetwork(linkDistance = 112, links, height="800px", width="1300px", fontSize = 14,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T    )
}
graphs[['3']]
colnames(clinical_Hibiscus_kept_merged_vcall_MIIC)
colnames(clinical_Hibiscus_kept_merged_vcall_MIIC[['3']])
colnames(clinical_Hibiscus_kept_merged_vcall_MIIC[['4']])
ggplot(clinical_Hibiscus_kept_merged_vcall[[as.character(4)]], aes(y = IGHG, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
graphs$`4 Adalimumab`
ggplot(clinical_Hibiscus_kept_merged_vcall[[as.character(4)]], aes(y = IGHG, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
graphs
a = clinical_Hibiscus_kept_merged_vcall[['4 Adalimumab']]
a = clinical_Hibiscus_kept_merged_vcall[['4']] %>% dplyr::filter(Treatment.Arm=='Adalimumab')
table(a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHG, a$MCS.Clin.Rem.Week10)
colnames(clinical_Hibiscus_kept_merged_vcall_MIIC[['4']])
ggplot(clinical_Hibiscus_kept_merged_vcall[[as.character(4)]], aes(y = IGHG, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
graphs$`4 Adalimumab`
miic::discretizeMutual(a$IGHM, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHA, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$TRDC, a$MCS.Clin.Rem.Week10)
graphs$`4 Adalimumab`
a$IGHG
graphs$`4 Adalimumab`
miic::discretizeMutual(a$TRDC, a$MCS.Clin.Rem.Week10)
a$TRDC
graphs$`4 Adalimumab`
ggplot(clinical_Hibiscus_kept_merged_vcall[[as.character(4)]], aes(y = IGHG, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
ggplot(a, aes(y = IGHG, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
dim(a)
a = clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character(4)]]
dim(a)
a = clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character('4')]] %>% dplyr::filter(Treatment.Arm=='Adalimumab')
ggplot(a, aes(y = IGHG, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
ggplot(a, aes(y = IGHG, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
miic::discretizeMutual(a$TRDC, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHG, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHA, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHD, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHE, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHG, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$IGHM, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$TRAC, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$TRBC, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$TRDC, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$Sex, a$MCS.Clin.Rem.Week10)
miic::discretizeMutual(a$dAlbumin_Week10, a$MCS.Clin.Rem.Week10)
a = clinical_Hibiscus_kept_merged_vcall_MIIC[[as.character('5')]] %>% dplyr::filter(Treatment.Arm=='Adalimumab')
graphs
graphs[['4']]
graphs[['4 Adalimumab']]
ggplot(clinical_Hibiscus_kept_merged_vcall[[as.character(4)]], aes(y = Diversity_1, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
ggplot(clinical_Hibiscus_kept_merged_vcall[[as.character(4)]], aes(y = Diversity_0, group = factor(MCS.Clin.Rem.Week10), col = factor(MCS.Clin.Rem.Week10))) + geom_boxplot() + facet_wrap(time~Treatment.Arm) + labs(color = "Clinical Remission")  +
scale_color_discrete(labels=c('No', 'Yes'))
db = read.csv('~/Institut Roche Day - January 2024, 17 (Responses) - Form Responses 1.csv')
db = read.csv('~/Institut Roche Day - January 2024, 17 (Responses) - Form Responses 1.csv')
View(db)
colnames(db)
priorities = db[,2:14]
db_priorities = db[,2:14]
db_priorities = t(db[,2:14])
View(db_priorities)
db_priorities = db[,2:14]
View(priorities)
colnames(db_priorities )
paste(1:12, 'Choice')
colnames(db_priorities) = paste(1:12, 'Choice')
db = read.csv('~/Institut Roche Day - January 2024, 17 (Responses) - Form Responses 1.csv')
db_priorities = db[,2:14]
colnames(db_priorities) = paste(1:12, 'Choice')
db = read.csv('~/Institut Roche Day - January 2024, 17 (Responses) - Form Responses 1.csv')
db_priorities = db[,2:14]
colnames(db)
db = read.csv('~/Institut Roche Day - January 2024, 17 (Responses) - Form Responses 1.csv')
db_priorities = db[,3:14]
colnames(db_priorities) = paste(1:12, 'Choice')
unique(db_priorities)
values = unique(unlist(df))
values
values = unique(unlist(db_priorities))
values
values = unique(unlist(db_priorities))
values_importance = rep(0, length(values_importance))
names(values_importance) = values
values = unique(unlist(db_priorities))
values_importance = rep(0, length(values_importance))
names(values_importance) = values
values = unique(unlist(db_priorities))
values_importance = rep(0, length(values))
names(values_importance) = values
values_importance
r=1
c=1
which(values = db_priorities[r,c])
db_priorities[r,c]
values
which(values == db_priorities[r,c])
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[which(values == db_priorities[r,c])] = values_importance[which(values == db_priorities[r,c])] + (12-c)
}
}
values_importance
df_values_importance = data.frame(importance = values_importance)
df_values_importance
ggplot(df_values_importance, aes(=importance)) + geom_bar()
ggplot(df_values_importance, aes(y=importance)) + geom_bar()
ggplot(df_values_importance, aes(y=importance)) + geom_bar(stat = "identity")
df_values_importance = data.frame(names = values, importance = values_importance)
df_values_importance
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity")
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip()
df_values_importance = df_values_importance[,order(df_values_importance$importance)]
df_values_importance = df_values_importance[order(df_values_importance$importance),]
df_values_importance
df_values_importance = df_values_importance[order(df_values_importance$importance, decreasing = T),]
df_values_importance
df_values_importance$names = factor(df_values_importance$names)
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip()
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip()
df_values_importance$names
df_values_importance = data.frame(names = values, importance = values_importance)
df_values_importance = df_values_importance[order(df_values_importance$importance, decreasing = T),]
df_values_importance$names = factor(df_values_importance$names, levels = df_values_importance$names)
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip()
df_values_importance = data.frame(names = values, importance = values_importance)
df_values_importance = df_values_importance[order(df_values_importance$importance),]
df_values_importance$names = factor(df_values_importance$names, levels = df_values_importance$names)
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip()
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + ylab('')
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('')
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') + theme_bw() +
theme(axis.text=element_text(size=16), axis.title=element_text(size=18))
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') + theme_bw() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18))
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') + theme_bw() +
theme(axis.text=element_text(size=10), axis.title=element_text(size=18))
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') + theme_bw() +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))
values_importance
values = unique(unlist(db_priorities))
values_importance = rep(NA, length(values))
names(values_importance) = values
values_importance
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[which(values == db_priorities[r,c])] = c(values_importance[which(values == db_priorities[r,c])] , (12-c))
}
}
values_importance
values = unique(unlist(db_priorities))
values_importance = rep(c(), length(values))
names(values_importance) = values
values_importance
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[which(values == db_priorities[r,c])] = c(values_importance[which(values == db_priorities[r,c])] , (12-c))
}
}
values = unique(unlist(db_priorities))
values_importance = list()
for(value in values)
values_importance[[value]] = c()
values_importance
values = unique(unlist(db_priorities))
values_importance = list()
for(value in values)
values_importance[[value]] = c()
values_importance
values
length(values_importance)
db = read.csv('~/Institut Roche Day - January 2024, 17 (Responses) - Form Responses 1.csv')
db_priorities = db[,3:14]
colnames(db_priorities) = paste(1:12, 'Choice')
values = unique(unlist(db_priorities))
values_importance = list()
for(value in values)
values_importance[[value]] = c()
values_importance
values_importance
values_importance = list()
for(value in values){
print(value)
values_importance[[value]] = c()
}
for(value in values){
print(value)
values_importance[[as.character(value)]] = c()
}
values_importance
for(value in values){
print(value)
values_importance[[as.character(value)]] = ''
}
values_importance
values_importance = list()
for(value in values){
print(value)
values_importance[[as.character(value)]] = vector()
}
values_importance
values_importance[[db_priorities[r,c]]]
values = unique(unlist(db_priorities))
values_importance = list()
for(value in values){
print(value)
values_importance[[as.character(value)]] = vector()
}
values_importance
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[[db_priorities[r,c]]] = c(values_importance[[db_priorities[r,c]]] , (12-c))
}
}
values_importance
values = unique(unlist(db_priorities))
values_importance = list()
for(value in values){
print(value)
values_importance[[as.character(value)]] = vector()
}
values_importance
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[[db_priorities[r,c]]] = c(values_importance[[db_priorities[r,c]]] , (13-c))
}
}
values_importance
unlist()
unlist(values_importance)
values = unique(unlist(db_priorities))
values_importance = list()
values_importance_sum = rep(0, length(values))
for(value in values){
print(value)
values_importance[[as.character(value)]] = vector()
}
values_importance
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[[db_priorities[r,c]]] = c(values_importance[[db_priorities[r,c]]] , (13-c))
values_importance_sum[which(values == db_priorities[r,c])] = values_importance_sum[which(values == db_priorities[r,c])]  + (13-c)
}
}
values_importance
values_importance_sum
names(values_importance_sum) = values
for(value in values){
print(value)
values_importance[[as.character(value)]] = vector()
}
values_importance
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[[db_priorities[r,c]]] = c(values_importance[[db_priorities[r,c]]] , (13-c))
values_importance_sum[which(values == db_priorities[r,c])] = values_importance_sum[which(values == db_priorities[r,c])]  + (13-c)
}
}
values_importance
values_importance_sum
db = read.csv('~/Institut Roche Day - January 2024, 17 (Responses) - Form Responses 1.csv')
db_priorities = db[,3:14]
colnames(db_priorities) = paste(1:12, 'Choice')
values = unique(unlist(db_priorities))
values_importance = list()
values_importance_sum = rep(0, length(values))
names(values_importance_sum) = values
for(value in values){
print(value)
values_importance[[as.character(value)]] = vector()
}
values_importance
for(r in 1:nrow(db_priorities)){
for(c in 1:ncol(db_priorities)){
values_importance[[db_priorities[r,c]]] = c(values_importance[[db_priorities[r,c]]] , (13-c))
values_importance_sum[which(values == db_priorities[r,c])] = values_importance_sum[which(values == db_priorities[r,c])]  + (13-c)
}
}
values_importance
values_importance_sum
df_values_importance = data.frame(names = values, importance = values_importance_sum)
df_values_importance = df_values_importance[order(df_values_importance$importance),]
df_values_importance$names = factor(df_values_importance$names, levels = df_values_importance$names)
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14))
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + xlab('Score')
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + ylab('Score')
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity") + coord_flip() + xlab('') +
theme(axis.text=element_text(size=15), axis.title=element_text(size=18)) + ylab('Score')
df_values_importance$color = ifelse(df_values_importance$importance > 70, 'green', 'gray')
df_values_importance
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity", col = color) + coord_flip() + xlab('') +
theme(axis.text=element_text(size=15), axis.title=element_text(size=18)) + ylab('Score')
df_values_importance
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity", fill = color) + coord_flip() + xlab('') +
theme(axis.text=element_text(size=15), axis.title=element_text(size=18)) + ylab('Score')
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity", fill = df_values_importance$color) + coord_flip() + xlab('') +
theme(axis.text=element_text(size=15), axis.title=element_text(size=18)) + ylab('Score')
df_values_importance$color = ifelse(df_values_importance$importance > 70, 'darkgreen', 'gray')
df_values_importance
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity", fill = df_values_importance$color) + coord_flip() + xlab('') +
theme(axis.text=element_text(size=15), axis.title=element_text(size=18)) + ylab('Score')
df_values_importance$color = ifelse(df_values_importance$importance > 70, 'darkgreen', 'darkgray')
df_values_importance
ggplot(df_values_importance, aes(x = names, y=importance)) + geom_bar(stat = "identity", fill = df_values_importance$color) + coord_flip() + xlab('') +
theme(axis.text=element_text(size=15), axis.title=element_text(size=18)) + ylab('Score')
library(dplyr)
library(miic)
source('~/Code/General/functions.R')
source('~/Code/TCR-BCR/diversity.R')
## remotes::install_github("miicTeam/miic_R_package@consequence")
## Clinical data
clinical_Hibiscus = read.csv("~/TCR_IBD/data/Hibiscus/anonymized_ga28948_colData_for_each_patient.csv")
## Sample map
sampleMap_Hibiscus = read.csv("~/TCR_IBD/data/Hibiscus/sample_map_hibiscus_I_111023.csv")
## AIRR data
# load("~/TCR_IBD/data/Hibiscus/AIRR_list_HibiscusI_norep.Rdata")
#
# load("~/TCR_IBD/data/Hibiscus/CDR_list_Hibiscus_norep.Rdata")
load("~/TCR_IBD/data/Hibiscus/CDR_list_HibiscusI_Rep_041023.Rdata", verbose=TRUE)
load("~/TCR_IBD/data/Hibiscus/AIRR_list_HibiscusI_Rep_041023.Rdata", verbose=TRUE)
load('~/TCR_IBD/data/Hibiscus/experiments_Hibiscus_111023.Rdata', verbose = T)
# #clinical_Hibiscus = clinical_Hibiscus[order(clinical_Hibiscus$Disease.Duration, decreasing = T),]
# clinical_Hibiscus_ordered = clinical_Hibiscus[with(clinical_Hibiscus, order(-Disease.Duration, VISIT)), ]
#
# # keep only samples at week 10 OR week 14
# clinical_Hibiscus_kept = clinical_Hibiscus_ordered %>% dplyr::filter(VISIT %in% c('SCREENING', 'WEEK 10'))
# get patients that are present at the baseline
sample_id_baseline = sampleMap_Hibiscus$SAMPLE_ID[which(sampleMap_Hibiscus$VISIT=='SCREENING')]
patient_id_baseline =  sampleMap_Hibiscus$PATIENT_ID[which(sampleMap_Hibiscus$VISIT == 'SCREENING')]
# get patients that are present at week10
sample_id_week10 =  sampleMap_Hibiscus$SAMPLE_ID[which(sampleMap_Hibiscus$VISIT == 'WEEK 10')]
patient_id_week10 =  sampleMap_Hibiscus$PATIENT_ID[which(sampleMap_Hibiscus$VISIT == 'WEEK 10')]
patient_id_2_timepoints = intersect(patient_id_baseline, patient_id_week10)
clinical_Hibiscus_list = list()
# clinical_Hibiscus_samples_2_timepoints = list()
# remove duplicated evaluations on the sample map
timepoints = c('SCREENING', 'WEEK 10')
remove = c()
for(pat in patient_id_2_timepoints){
for(t in timepoints){
v = sampleMap_Hibiscus$SAMPLE_ID[which(sampleMap_Hibiscus$PATIENT_ID==pat & sampleMap_Hibiscus$VISIT==t)]
if(length(v) > 1){
remove = c(remove, v[2:length(v)])
}
}
}
CDR_list_Hibiscus = CDR_list_Hibiscus[names(CDR_list_Hibiscus) %in% gsub('-','.',remove) == FALSE]          # Remove list elements %in%
sampleMap_Hibiscus = sampleMap_Hibiscus[-which(sampleMap_Hibiscus$SAMPLE_ID==remove),]
# get clinical data at baseline
clinical_Hibiscus_list[['baseline']] = clinical_Hibiscus[which(clinical_Hibiscus$PATIENT_ID %in% patient_id_2_timepoints),]
clinical_Hibiscus_list[['baseline']] = clinical_Hibiscus_list[['baseline']][match(patient_id_2_timepoints, clinical_Hibiscus_list[['baseline']]$PATIENT_ID),]
clinical_Hibiscus_list[['baseline']]$SAMPLE_ID = sampleMap_Hibiscus$SAMPLE_ID[which(sampleMap_Hibiscus$PATIENT_ID %in% patient_id_2_timepoints & sampleMap_Hibiscus$VISIT=='SCREENING')]
# get clinical data at week10
clinical_Hibiscus_list[['week10']]  = clinical_Hibiscus[which(clinical_Hibiscus$PATIENT_ID %in% patient_id_2_timepoints),]
clinical_Hibiscus_list[['week10']] = clinical_Hibiscus_list[['week10']][match(patient_id_2_timepoints, clinical_Hibiscus_list[['week10']]$PATIENT_ID),]
clinical_Hibiscus_list[['week10']]$SAMPLE_ID = sampleMap_Hibiscus$SAMPLE_ID[which(sampleMap_Hibiscus$PATIENT_ID %in% patient_id_2_timepoints & sampleMap_Hibiscus$VISIT=='WEEK 10')]
specificities = c(3,4)
type_C_V = 'C'
# type_C_V = 'V'
# specificities = 5
timepoints = c('baseline', 'week10')
a = AIRR_list_Hibiscus[[1]]
View(a)
a = CDR_list_Hibiscus[[1]]
a = CDR_list_Hibiscus[[1]][[1]]
a = CDR_list_Hibiscus[[1]][[3]]
a = CDR_list_Hibiscus[[1]][[2]]
a = CDR_list_Hibiscus[[1]]
a = CDR_list_Hibiscus[[1]][[``]]
a = CDR_list_Hibiscus[[1]][[1]]
sapply(a$CDR3aa, function(x){length(x)})
hist(sapply(a$CDR3aa, function(x){nchar(x)}))
counts_t_b = read.csv('~/TCR_IBD/data/Hibiscus_II/ga28949.hibiscus2.pathai.metadata.txt')
View(counts_t_b)
counts_t_b = read.csv('~/TCR_IBD/data/Hibiscus_II/ga28949.hibiscus2.pathai.metadata.txt', sep='\t')
colnames(counts_t_b)
View(counts_t_b)
colnames(counts_t_b)
counts_t_b$COUNT.PROP...LYMPHOCYTES.PLASMA.CELLS..OVER..ALL.CELLS...IN..NORMAL.EPITHELIUM._HE
counts_t_b$TOTAL..PLASMA.CELL.CELLS..IN..NORMAL.EPITHELIUM._HE
colnames(counts_t_b)
counts_t_b$TOTAL..ALL.CELLS..IN..BASAL.PLASMACYTOSIS._HE
counts_t_b$TOTAL..ALL.CELLS..IN..BLOOD.VESSEL.LUMEN._HE
results = t(read.csv('~/omr/results_helene.csv', header = FALSE))
results[is.na(results)] = ''
write.table(results,'~/omr/results_helene_t.csv', sep = ';', quote = F, row.names = F)
library(miicsdg)
library(miic)
library(maeviews)
library(CDSE)
cdse_set_environment("prod")
cdse_login()
install.packages('CDSE')
install.packages("CDSE")
library(causaloptim)
package_version(causaloptim)
package_version('causaloptim')
library(causaloptim)
package_version('causaloptim')
package_version('causaloptim')
library(causaloptim)
package_version('causaloptim')
packinfo["graphics",c("Package", "Version")]
causaloptim::find_cycles()
a = read.csv('~/BRCA_datasets/MIXED1977patients/brca_mRNA_patients_csv.csv')
miicsdg::miicsdg(originalData = a[,1:10])
remove.packages(miicsdg())
remove.packages(miicsdg
)
remove.packages('causaloptim')
miicsdg::miicsdg(originalData = a[,1:10])
remove.packages('miicsdg')
install.packages('~/miicsdg_1.7.tar.gz', repos = NULL, source= TRUE)
miicsdg::miicsdg(originalData = a[,1:10])
load("~/miicsdg/.RData")
renv::rebuild("miicsdg", recursive = TRUE)
